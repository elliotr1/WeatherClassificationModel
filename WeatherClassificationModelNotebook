{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b167b38a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:43.748412Z",
     "iopub.status.busy": "2024-10-04T15:03:43.747937Z",
     "iopub.status.idle": "2024-10-04T15:03:47.403404Z",
     "shell.execute_reply": "2024-10-04T15:03:47.401947Z"
    },
    "papermill": {
     "duration": 3.670425,
     "end_time": "2024-10-04T15:03:47.407104",
     "exception": false,
     "start_time": "2024-10-04T15:03:43.736679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a1171497",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.428162Z",
     "iopub.status.busy": "2024-10-04T15:03:47.427315Z",
     "iopub.status.idle": "2024-10-04T15:03:47.493575Z",
     "shell.execute_reply": "2024-10-04T15:03:47.492171Z"
    },
    "papermill": {
     "duration": 0.080578,
     "end_time": "2024-10-04T15:03:47.497072",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.416494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/weather-type-classification/weather_classification_data.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50034a60",
   "metadata": {
    "papermill": {
     "duration": 0.008422,
     "end_time": "2024-10-04T15:03:47.514254",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.505832",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Displays the top 10 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8bdbff83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.534293Z",
     "iopub.status.busy": "2024-10-04T15:03:47.533809Z",
     "iopub.status.idle": "2024-10-04T15:03:47.578185Z",
     "shell.execute_reply": "2024-10-04T15:03:47.576655Z"
    },
    "papermill": {
     "duration": 0.058446,
     "end_time": "2024-10-04T15:03:47.581745",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.523299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Precipitation (%)</th>\n",
       "      <th>Cloud Cover</th>\n",
       "      <th>Atmospheric Pressure</th>\n",
       "      <th>UV Index</th>\n",
       "      <th>Season</th>\n",
       "      <th>Visibility (km)</th>\n",
       "      <th>Location</th>\n",
       "      <th>Weather Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.0</td>\n",
       "      <td>73</td>\n",
       "      <td>9.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1010.82</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "      <td>3.5</td>\n",
       "      <td>inland</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39.0</td>\n",
       "      <td>96</td>\n",
       "      <td>8.5</td>\n",
       "      <td>71.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1011.43</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>10.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.0</td>\n",
       "      <td>64</td>\n",
       "      <td>7.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1018.72</td>\n",
       "      <td>5</td>\n",
       "      <td>Spring</td>\n",
       "      <td>5.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38.0</td>\n",
       "      <td>83</td>\n",
       "      <td>1.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1026.25</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>1.0</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27.0</td>\n",
       "      <td>74</td>\n",
       "      <td>17.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>990.67</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>2.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>32.0</td>\n",
       "      <td>55</td>\n",
       "      <td>3.5</td>\n",
       "      <td>26.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>1010.03</td>\n",
       "      <td>2</td>\n",
       "      <td>Summer</td>\n",
       "      <td>5.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-2.0</td>\n",
       "      <td>97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>990.87</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>4.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Snowy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.0</td>\n",
       "      <td>85</td>\n",
       "      <td>6.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>984.46</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>3.5</td>\n",
       "      <td>inland</td>\n",
       "      <td>Snowy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.0</td>\n",
       "      <td>83</td>\n",
       "      <td>6.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>999.44</td>\n",
       "      <td>0</td>\n",
       "      <td>Winter</td>\n",
       "      <td>1.0</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Snowy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>28.0</td>\n",
       "      <td>74</td>\n",
       "      <td>8.5</td>\n",
       "      <td>107.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1012.13</td>\n",
       "      <td>8</td>\n",
       "      <td>Winter</td>\n",
       "      <td>7.5</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Temperature  Humidity  Wind Speed  Precipitation (%)    Cloud Cover  \\\n",
       "0         14.0        73         9.5               82.0  partly cloudy   \n",
       "1         39.0        96         8.5               71.0  partly cloudy   \n",
       "2         30.0        64         7.0               16.0          clear   \n",
       "3         38.0        83         1.5               82.0          clear   \n",
       "4         27.0        74        17.0               66.0       overcast   \n",
       "5         32.0        55         3.5               26.0       overcast   \n",
       "6         -2.0        97         8.0               86.0       overcast   \n",
       "7          3.0        85         6.0               96.0  partly cloudy   \n",
       "8          3.0        83         6.0               66.0       overcast   \n",
       "9         28.0        74         8.5              107.0          clear   \n",
       "\n",
       "   Atmospheric Pressure  UV Index  Season  Visibility (km)  Location  \\\n",
       "0               1010.82         2  Winter              3.5    inland   \n",
       "1               1011.43         7  Spring             10.0    inland   \n",
       "2               1018.72         5  Spring              5.5  mountain   \n",
       "3               1026.25         7  Spring              1.0   coastal   \n",
       "4                990.67         1  Winter              2.5  mountain   \n",
       "5               1010.03         2  Summer              5.0    inland   \n",
       "6                990.87         1  Winter              4.0    inland   \n",
       "7                984.46         1  Winter              3.5    inland   \n",
       "8                999.44         0  Winter              1.0  mountain   \n",
       "9               1012.13         8  Winter              7.5   coastal   \n",
       "\n",
       "  Weather Type  \n",
       "0        Rainy  \n",
       "1       Cloudy  \n",
       "2        Sunny  \n",
       "3        Sunny  \n",
       "4        Rainy  \n",
       "5       Cloudy  \n",
       "6        Snowy  \n",
       "7        Snowy  \n",
       "8        Snowy  \n",
       "9        Sunny  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8661e467",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.602353Z",
     "iopub.status.busy": "2024-10-04T15:03:47.601884Z",
     "iopub.status.idle": "2024-10-04T15:03:47.637953Z",
     "shell.execute_reply": "2024-10-04T15:03:47.636362Z"
    },
    "papermill": {
     "duration": 0.049887,
     "end_time": "2024-10-04T15:03:47.640946",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.591059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13200 entries, 0 to 13199\n",
      "Data columns (total 11 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   Temperature           13200 non-null  float64\n",
      " 1   Humidity              13200 non-null  int64  \n",
      " 2   Wind Speed            13200 non-null  float64\n",
      " 3   Precipitation (%)     13200 non-null  float64\n",
      " 4   Cloud Cover           13200 non-null  object \n",
      " 5   Atmospheric Pressure  13200 non-null  float64\n",
      " 6   UV Index              13200 non-null  int64  \n",
      " 7   Season                13200 non-null  object \n",
      " 8   Visibility (km)       13200 non-null  float64\n",
      " 9   Location              13200 non-null  object \n",
      " 10  Weather Type          13200 non-null  object \n",
      "dtypes: float64(5), int64(2), object(4)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9191f7d5",
   "metadata": {
    "papermill": {
     "duration": 0.008737,
     "end_time": "2024-10-04T15:03:47.658662",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.649925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Describes the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14fe8c34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.678573Z",
     "iopub.status.busy": "2024-10-04T15:03:47.678046Z",
     "iopub.status.idle": "2024-10-04T15:03:47.720920Z",
     "shell.execute_reply": "2024-10-04T15:03:47.719551Z"
    },
    "papermill": {
     "duration": 0.056042,
     "end_time": "2024-10-04T15:03:47.723654",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.667612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Precipitation (%)</th>\n",
       "      <th>Atmospheric Pressure</th>\n",
       "      <th>UV Index</th>\n",
       "      <th>Visibility (km)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "      <td>13200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>19.127576</td>\n",
       "      <td>68.710833</td>\n",
       "      <td>9.832197</td>\n",
       "      <td>53.644394</td>\n",
       "      <td>1005.827896</td>\n",
       "      <td>4.005758</td>\n",
       "      <td>5.462917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>17.386327</td>\n",
       "      <td>20.194248</td>\n",
       "      <td>6.908704</td>\n",
       "      <td>31.946541</td>\n",
       "      <td>37.199589</td>\n",
       "      <td>3.856600</td>\n",
       "      <td>3.371499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-25.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>800.120000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>994.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>1007.650000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>84.000000</td>\n",
       "      <td>13.500000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>1016.772500</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>109.000000</td>\n",
       "      <td>109.000000</td>\n",
       "      <td>48.500000</td>\n",
       "      <td>109.000000</td>\n",
       "      <td>1199.210000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Temperature      Humidity    Wind Speed  Precipitation (%)  \\\n",
       "count  13200.000000  13200.000000  13200.000000       13200.000000   \n",
       "mean      19.127576     68.710833      9.832197          53.644394   \n",
       "std       17.386327     20.194248      6.908704          31.946541   \n",
       "min      -25.000000     20.000000      0.000000           0.000000   \n",
       "25%        4.000000     57.000000      5.000000          19.000000   \n",
       "50%       21.000000     70.000000      9.000000          58.000000   \n",
       "75%       31.000000     84.000000     13.500000          82.000000   \n",
       "max      109.000000    109.000000     48.500000         109.000000   \n",
       "\n",
       "       Atmospheric Pressure      UV Index  Visibility (km)  \n",
       "count          13200.000000  13200.000000     13200.000000  \n",
       "mean            1005.827896      4.005758         5.462917  \n",
       "std               37.199589      3.856600         3.371499  \n",
       "min              800.120000      0.000000         0.000000  \n",
       "25%              994.800000      1.000000         3.000000  \n",
       "50%             1007.650000      3.000000         5.000000  \n",
       "75%             1016.772500      7.000000         7.500000  \n",
       "max             1199.210000     14.000000        20.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "167a25f1",
   "metadata": {
    "papermill": {
     "duration": 0.008878,
     "end_time": "2024-10-04T15:03:47.742192",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.733314",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Describes the object's in the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "215486bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.763552Z",
     "iopub.status.busy": "2024-10-04T15:03:47.762388Z",
     "iopub.status.idle": "2024-10-04T15:03:47.799177Z",
     "shell.execute_reply": "2024-10-04T15:03:47.797772Z"
    },
    "papermill": {
     "duration": 0.05047,
     "end_time": "2024-10-04T15:03:47.801943",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.751473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cloud Cover</th>\n",
       "      <th>Season</th>\n",
       "      <th>Location</th>\n",
       "      <th>Weather Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>13200</td>\n",
       "      <td>13200</td>\n",
       "      <td>13200</td>\n",
       "      <td>13200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>overcast</td>\n",
       "      <td>Winter</td>\n",
       "      <td>inland</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>6090</td>\n",
       "      <td>5610</td>\n",
       "      <td>4816</td>\n",
       "      <td>3300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Cloud Cover  Season Location Weather Type\n",
       "count        13200   13200    13200        13200\n",
       "unique           4       4        3            4\n",
       "top       overcast  Winter   inland        Rainy\n",
       "freq          6090    5610     4816         3300"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=['object'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ef688c9",
   "metadata": {
    "papermill": {
     "duration": 0.009182,
     "end_time": "2024-10-04T15:03:47.820528",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.811346",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I am checking to see if there any empty rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c6ddc10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.842854Z",
     "iopub.status.busy": "2024-10-04T15:03:47.841497Z",
     "iopub.status.idle": "2024-10-04T15:03:47.858047Z",
     "shell.execute_reply": "2024-10-04T15:03:47.856489Z"
    },
    "papermill": {
     "duration": 0.030564,
     "end_time": "2024-10-04T15:03:47.860743",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.830179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temperature             0\n",
      "Humidity                0\n",
      "Wind Speed              0\n",
      "Precipitation (%)       0\n",
      "Cloud Cover             0\n",
      "Atmospheric Pressure    0\n",
      "UV Index                0\n",
      "Season                  0\n",
      "Visibility (km)         0\n",
      "Location                0\n",
      "Weather Type            0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.isna().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f0408e7",
   "metadata": {
    "papermill": {
     "duration": 0.009409,
     "end_time": "2024-10-04T15:03:47.879900",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.870491",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This piece of code visualises the outliers in the dataset using a boxplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "75ba49af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:47.901872Z",
     "iopub.status.busy": "2024-10-04T15:03:47.901370Z",
     "iopub.status.idle": "2024-10-04T15:03:49.508159Z",
     "shell.execute_reply": "2024-10-04T15:03:49.506862Z"
    },
    "papermill": {
     "duration": 1.621432,
     "end_time": "2024-10-04T15:03:49.511217",
     "exception": false,
     "start_time": "2024-10-04T15:03:47.889785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Precipitation (%)</th>\n",
       "      <th>Cloud Cover</th>\n",
       "      <th>Atmospheric Pressure</th>\n",
       "      <th>UV Index</th>\n",
       "      <th>Season</th>\n",
       "      <th>Visibility (km)</th>\n",
       "      <th>Location</th>\n",
       "      <th>Weather Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.0</td>\n",
       "      <td>73</td>\n",
       "      <td>9.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1010.82</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "      <td>3.5</td>\n",
       "      <td>inland</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39.0</td>\n",
       "      <td>96</td>\n",
       "      <td>8.5</td>\n",
       "      <td>71.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1011.43</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>10.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.0</td>\n",
       "      <td>64</td>\n",
       "      <td>7.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1018.72</td>\n",
       "      <td>5</td>\n",
       "      <td>Spring</td>\n",
       "      <td>5.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38.0</td>\n",
       "      <td>83</td>\n",
       "      <td>1.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1026.25</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>1.0</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27.0</td>\n",
       "      <td>74</td>\n",
       "      <td>17.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>990.67</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>2.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13195</th>\n",
       "      <td>10.0</td>\n",
       "      <td>74</td>\n",
       "      <td>14.5</td>\n",
       "      <td>71.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>1003.15</td>\n",
       "      <td>1</td>\n",
       "      <td>Summer</td>\n",
       "      <td>1.0</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13196</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>76</td>\n",
       "      <td>3.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>cloudy</td>\n",
       "      <td>1067.23</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>6.0</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Snowy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13197</th>\n",
       "      <td>30.0</td>\n",
       "      <td>77</td>\n",
       "      <td>5.5</td>\n",
       "      <td>28.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>1012.69</td>\n",
       "      <td>3</td>\n",
       "      <td>Autumn</td>\n",
       "      <td>9.0</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13198</th>\n",
       "      <td>3.0</td>\n",
       "      <td>76</td>\n",
       "      <td>10.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>984.27</td>\n",
       "      <td>0</td>\n",
       "      <td>Winter</td>\n",
       "      <td>2.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Snowy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13199</th>\n",
       "      <td>-5.0</td>\n",
       "      <td>38</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>1015.37</td>\n",
       "      <td>5</td>\n",
       "      <td>Autumn</td>\n",
       "      <td>10.0</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13200 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Temperature  Humidity  Wind Speed  Precipitation (%)    Cloud Cover  \\\n",
       "0             14.0        73         9.5               82.0  partly cloudy   \n",
       "1             39.0        96         8.5               71.0  partly cloudy   \n",
       "2             30.0        64         7.0               16.0          clear   \n",
       "3             38.0        83         1.5               82.0          clear   \n",
       "4             27.0        74        17.0               66.0       overcast   \n",
       "...            ...       ...         ...                ...            ...   \n",
       "13195         10.0        74        14.5               71.0       overcast   \n",
       "13196         -1.0        76         3.5               23.0         cloudy   \n",
       "13197         30.0        77         5.5               28.0       overcast   \n",
       "13198          3.0        76        10.0               94.0       overcast   \n",
       "13199         -5.0        38         0.0               92.0       overcast   \n",
       "\n",
       "       Atmospheric Pressure  UV Index  Season  Visibility (km)  Location  \\\n",
       "0                   1010.82         2  Winter              3.5    inland   \n",
       "1                   1011.43         7  Spring             10.0    inland   \n",
       "2                   1018.72         5  Spring              5.5  mountain   \n",
       "3                   1026.25         7  Spring              1.0   coastal   \n",
       "4                    990.67         1  Winter              2.5  mountain   \n",
       "...                     ...       ...     ...              ...       ...   \n",
       "13195               1003.15         1  Summer              1.0  mountain   \n",
       "13196               1067.23         1  Winter              6.0   coastal   \n",
       "13197               1012.69         3  Autumn              9.0   coastal   \n",
       "13198                984.27         0  Winter              2.0    inland   \n",
       "13199               1015.37         5  Autumn             10.0  mountain   \n",
       "\n",
       "      Weather Type  \n",
       "0            Rainy  \n",
       "1           Cloudy  \n",
       "2            Sunny  \n",
       "3            Sunny  \n",
       "4            Rainy  \n",
       "...            ...  \n",
       "13195        Rainy  \n",
       "13196        Snowy  \n",
       "13197       Cloudy  \n",
       "13198        Snowy  \n",
       "13199        Rainy  \n",
       "\n",
       "[13200 rows x 11 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns\n",
    "for column in numerical_columns:\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    sns.boxplot(data=df, x=column)\n",
    "    plt.show()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1981f5e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:49.539298Z",
     "iopub.status.busy": "2024-10-04T15:03:49.538855Z",
     "iopub.status.idle": "2024-10-04T15:03:49.560989Z",
     "shell.execute_reply": "2024-10-04T15:03:49.559489Z"
    },
    "papermill": {
     "duration": 0.04028,
     "end_time": "2024-10-04T15:03:49.564223",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.523943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Temperature': 92, 'Humidity': 0, 'Wind Speed': 236, 'Precipitation (%)': 0, 'Atmospheric Pressure': 556, 'UV Index': 0, 'Visibility (km)': 282}\n"
     ]
    }
   ],
   "source": [
    "outliers_counts = {}\n",
    "for column in df.columns:\n",
    "    if df[column].dtype in ['float64', 'int64']:\n",
    "        z_scores = np.abs(stats.zscore(df[column]))\n",
    "        outliers_count = np.sum(z_scores > 3)\n",
    "        outliers_counts[column] = outliers_count\n",
    "print(outliers_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f2de767",
   "metadata": {
    "papermill": {
     "duration": 0.012975,
     "end_time": "2024-10-04T15:03:49.589949",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.576974",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this section I am dropping out the indexes which has at least 1 outlier column within in it's row using z-score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6ff5bb39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:49.618953Z",
     "iopub.status.busy": "2024-10-04T15:03:49.617761Z",
     "iopub.status.idle": "2024-10-04T15:03:49.646925Z",
     "shell.execute_reply": "2024-10-04T15:03:49.645519Z"
    },
    "papermill": {
     "duration": 0.046995,
     "end_time": "2024-10-04T15:03:49.650314",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.603319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for column in df.columns:\n",
    "    if df[column].dtype in ['float64', 'int64']:\n",
    "        z_scores = np.abs(stats.zscore(df[column]))\n",
    "        df = df[z_scores < 3]\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33daa533",
   "metadata": {
    "papermill": {
     "duration": 0.012684,
     "end_time": "2024-10-04T15:03:49.676015",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.663331",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this section I am normalising the numerical data using min max scaling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9d381ba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:49.703678Z",
     "iopub.status.busy": "2024-10-04T15:03:49.703197Z",
     "iopub.status.idle": "2024-10-04T15:03:49.719395Z",
     "shell.execute_reply": "2024-10-04T15:03:49.718016Z"
    },
    "papermill": {
     "duration": 0.033681,
     "end_time": "2024-10-04T15:03:49.722608",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.688927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for column in df.columns: \n",
    "    if df[column].dtype in ['float64', 'int64']:\n",
    "        df[column] = (df[column] - df[column].min()) / (df[column].max() - df[column].min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8453904f",
   "metadata": {
    "papermill": {
     "duration": 0.011915,
     "end_time": "2024-10-04T15:03:49.747543",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.735628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Spliting the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "256dbab4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:49.775073Z",
     "iopub.status.busy": "2024-10-04T15:03:49.773942Z",
     "iopub.status.idle": "2024-10-04T15:03:49.788338Z",
     "shell.execute_reply": "2024-10-04T15:03:49.787152Z"
    },
    "papermill": {
     "duration": 0.031365,
     "end_time": "2024-10-04T15:03:49.791269",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.759904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y_labels = df[\"Weather Type\"]\n",
    "X_data = df.select_dtypes(\"float64\")\n",
    "x_train, x_test, y_train, y_test = train_test_split(X_data, Y_labels, test_size=.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a08447c6",
   "metadata": {
    "papermill": {
     "duration": 0.012312,
     "end_time": "2024-10-04T15:03:49.815824",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.803512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This code fit's the data into Random Forest Model and use's bootstrapping due to there only being 1000 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "377b9165",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:49.842677Z",
     "iopub.status.busy": "2024-10-04T15:03:49.842154Z",
     "iopub.status.idle": "2024-10-04T15:03:51.104248Z",
     "shell.execute_reply": "2024-10-04T15:03:51.102794Z"
    },
    "papermill": {
     "duration": 1.279267,
     "end_time": "2024-10-04T15:03:51.107400",
     "exception": false,
     "start_time": "2024-10-04T15:03:49.828133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(n_estimators=100, random_state=42, bootstrap=True)\n",
    "rf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "858cde51",
   "metadata": {
    "papermill": {
     "duration": 0.012814,
     "end_time": "2024-10-04T15:03:51.133313",
     "exception": false,
     "start_time": "2024-10-04T15:03:51.120499",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Predict the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "91be3715",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:51.162453Z",
     "iopub.status.busy": "2024-10-04T15:03:51.161995Z",
     "iopub.status.idle": "2024-10-04T15:03:51.208324Z",
     "shell.execute_reply": "2024-10-04T15:03:51.206879Z"
    },
    "papermill": {
     "duration": 0.064242,
     "end_time": "2024-10-04T15:03:51.211463",
     "exception": false,
     "start_time": "2024-10-04T15:03:51.147221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = rf.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ec261cd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:51.240014Z",
     "iopub.status.busy": "2024-10-04T15:03:51.238681Z",
     "iopub.status.idle": "2024-10-04T15:03:51.376111Z",
     "shell.execute_reply": "2024-10-04T15:03:51.374748Z"
    },
    "papermill": {
     "duration": 0.154903,
     "end_time": "2024-10-04T15:03:51.379189",
     "exception": false,
     "start_time": "2024-10-04T15:03:51.224286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "report = classification_report(y_test, y_pred, output_dict=True)\n",
    "df_classification_report = pd.DataFrame(report).transpose()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "009ead4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:51.407562Z",
     "iopub.status.busy": "2024-10-04T15:03:51.407099Z",
     "iopub.status.idle": "2024-10-04T15:03:51.422439Z",
     "shell.execute_reply": "2024-10-04T15:03:51.421067Z"
    },
    "papermill": {
     "duration": 0.032311,
     "end_time": "2024-10-04T15:03:51.425257",
     "exception": false,
     "start_time": "2024-10-04T15:03:51.392946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1-score</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cloudy</th>\n",
       "      <td>0.921569</td>\n",
       "      <td>0.929160</td>\n",
       "      <td>0.925349</td>\n",
       "      <td>607.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rainy</th>\n",
       "      <td>0.940705</td>\n",
       "      <td>0.954472</td>\n",
       "      <td>0.947538</td>\n",
       "      <td>615.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Snowy</th>\n",
       "      <td>0.980033</td>\n",
       "      <td>0.957724</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>615.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sunny</th>\n",
       "      <td>0.940171</td>\n",
       "      <td>0.940171</td>\n",
       "      <td>0.940171</td>\n",
       "      <td>585.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.945500</td>\n",
       "      <td>0.945500</td>\n",
       "      <td>0.945500</td>\n",
       "      <td>0.9455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>macro avg</th>\n",
       "      <td>0.945619</td>\n",
       "      <td>0.945381</td>\n",
       "      <td>0.945452</td>\n",
       "      <td>2422.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weighted avg</th>\n",
       "      <td>0.945766</td>\n",
       "      <td>0.945500</td>\n",
       "      <td>0.945584</td>\n",
       "      <td>2422.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              precision    recall  f1-score    support\n",
       "Cloudy         0.921569  0.929160  0.925349   607.0000\n",
       "Rainy          0.940705  0.954472  0.947538   615.0000\n",
       "Snowy          0.980033  0.957724  0.968750   615.0000\n",
       "Sunny          0.940171  0.940171  0.940171   585.0000\n",
       "accuracy       0.945500  0.945500  0.945500     0.9455\n",
       "macro avg      0.945619  0.945381  0.945452  2422.0000\n",
       "weighted avg   0.945766  0.945500  0.945584  2422.0000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "32bdfc58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:03:51.454886Z",
     "iopub.status.busy": "2024-10-04T15:03:51.454454Z",
     "iopub.status.idle": "2024-10-04T15:03:51.875709Z",
     "shell.execute_reply": "2024-10-04T15:03:51.874358Z"
    },
    "papermill": {
     "duration": 0.440027,
     "end_time": "2024-10-04T15:03:51.879113",
     "exception": false,
     "start_time": "2024-10-04T15:03:51.439086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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WTXm3ImIiIiIlGBGmYiIiEgNVaRl3EoLM8pEREREREowo0xERESkhjhHWTUOlImIiIjUEJeHU42vEBERERGREswoExEREakhTr1QjRllIiIiIiIlmFEmIiIiUkPMKKvGjDIRERERkRLMKBMRERGpIWaUVWNGmYiIiIhICWaUiYiIiNQQ11FWjQNlIiIiIjUk1uDUC1X4UYKIiIiISAlmlImIiIjUEC/mU40ZZSIiIiIiJZhRJiIiIlJDvJhPNb5CRERERERKMKNMREREpIY4R1k1ZpSJiIiIiJRgRpmIiIhIDTGjrBoHykRERERqiBfzqcZXiIiIiIhICZFcLpeXdSXovxOJ+PUJERHRp6Ysh2FPhnQttWPb/rq91I79MTGjTERERESkBOcoExEREakhzlFWjQPlCub3k7KyrgIRevm+ffNNvHqyDGtC9JaZh6/w8/lbiWVYE6LXfFzNyroKpAIHykRERETqiNc3qcScOxERERGREswoExEREakh3nBENQ6UiYiIiNQQL+ZTja8QEREREZESzCgTERERqSFOvVCNGWUiIiIiKnOLFy+Gvb09pFIp6tevj7NnzxYZm5eXh2nTpsHJyQlSqRReXl44cOCAQoy9vT1EIlGhbejQocWuEwfKRERERGpIJBaX2lZSmzdvxqhRozB58mRcuHABXl5e8Pf3R3x8vNL4sLAwLFu2DAsXLsSNGzcwaNAgdO7cGRcvXhRizp07h+fPnwvb4cOHAQDdunUrdr04UCYiIiKiMjV37lwMGDAAQUFBcHd3x9KlS6Grq4tVq1YpjV+3bh3Gjx+PNm3awNHREYMHD0abNm0wZ84cIcbc3BxWVlbCtmfPHjg5OaFZs2bFrhcHykRERERqSCQWldpWErm5uTh//jxatmwplInFYrRs2RLR0dFK98nJyYFUKlUo09HRwYkTJ4o8x/r169GvXz+ISnCjFQ6UiYiIiOiDysnJQXp6usKWk5OjNDYxMREFBQWwtLRUKLe0tMSLFy+U7uPv74+5c+fizp07kMlkOHz4MHbs2IHnz58rjY+MjERqair69u1bonZwoExERESkhkozoxweHg4jIyOFLTw8/IPVfcGCBXBxcYGbmxu0tbUREhKCoKAgiIuYH71y5Up88cUXsLa2LtF5uDwcERERkToqxRuOhIaGYtSoUQplEolEaayZmRk0NDQQ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",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(df_classification_report[['precision', 'recall', 'f1-score']].astype(float), annot=True, cmap='coolwarm', fmt='.2f', linewidths=1, linecolor='black')\n",
    "plt.title('Classification Report Heatmap')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5268544,
     "sourceId": 8767723,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.809808,
   "end_time": "2024-10-04T15:03:52.618987",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-04T15:03:39.809179",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
